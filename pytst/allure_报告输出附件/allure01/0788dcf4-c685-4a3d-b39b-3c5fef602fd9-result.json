{"name": "test01", "status": "broken", "statusDetails": {"message": "FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\haiS.jpg'", "trace": "@pytest.fixture()\n    def attach_file():\n>       allure.attach.file(\"C:\\hai\\123.jpg\",\"嵇海亮最棒\",allure.attachment_type.JPG)\n\ntest_attach_fixture_finalizer.py:15: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\Lib\\site-packages\\allure_commons\\_allure.py:203: in file\n    plugin_manager.hook.attach_file(source=source, name=name, attachment_type=attachment_type, extension=extension)\n..\\venv\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\venv\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\venv\\Lib\\site-packages\\allure_pytest\\listener.py:240: in attach_file\n    self.allure_logger.attach_file(uuid4(), source, name=name, attachment_type=attachment_type, extension=extension)\n..\\venv\\Lib\\site-packages\\allure_commons\\reporter.py:160: in attach_file\n    plugin_manager.hook.report_attached_file(source=source, file_name=file_name)\n..\\venv\\Lib\\site-packages\\pluggy\\_hooks.py:265: in __call__\n    return self._hookexec(self.name, self.get_hookimpls(), kwargs, firstresult)\n..\\venv\\Lib\\site-packages\\pluggy\\_manager.py:80: in _hookexec\n    return self._inner_hookexec(hook_name, methods, kwargs, firstresult)\n..\\venv\\Lib\\site-packages\\allure_commons\\logger.py:44: in report_attached_file\n    shutil.copy2(source, destination)\nC:\\langue\\Lib\\shutil.py:436: in copy2\n    copyfile(src, dst, follow_symlinks=follow_symlinks)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nsrc = 'C:\\\\haiS.jpg', dst = WindowsPath('C:/pytst/allure_报告输出附件/allure01/5fa5d34e-eaaf-443d-a296-6f135341446d-attachment.jpg')\n\n    def copyfile(src, dst, *, follow_symlinks=True):\n        \"\"\"Copy data from src to dst in the most efficient way possible.\n    \n        If follow_symlinks is not set and src is a symbolic link, a new\n        symlink will be created instead of copying the file it points to.\n    \n        \"\"\"\n        sys.audit(\"shutil.copyfile\", src, dst)\n    \n        if _samefile(src, dst):\n            raise SameFileError(\"{!r} and {!r} are the same file\".format(src, dst))\n    \n        file_size = 0\n        for i, fn in enumerate([src, dst]):\n            try:\n                st = _stat(fn)\n            except OSError:\n                # File most likely does not exist\n                pass\n            else:\n                # XXX What about other special files? (sockets, devices...)\n                if stat.S_ISFIFO(st.st_mode):\n                    fn = fn.path if isinstance(fn, os.DirEntry) else fn\n                    raise SpecialFileError(\"`%s` is a named pipe\" % fn)\n                if _WINDOWS and i == 0:\n                    file_size = st.st_size\n    \n        if not follow_symlinks and _islink(src):\n            os.symlink(os.readlink(src), dst)\n        else:\n>           with open(src, 'rb') as fsrc:\nE           FileNotFoundError: [Errno 2] No such file or directory: 'C:\\\\haiS.jpg'\n\nC:\\langue\\Lib\\shutil.py:256: FileNotFoundError"}, "start": 1679998870422, "stop": 1679998870422, "uuid": "4211bcd3-2f2b-4be4-a306-af1b404c7c32", "historyId": "984c2f2b9cd029170e6c6a523695e1d1", "testCaseId": "bfd0d92356189de721fc13cf0d47d87b", "fullName": "test_attach_fixture_finalizer#test01", "labels": [{"name": "suite", "value": "test_attach_fixture_finalizer"}, {"name": "host", "value": "DESKTOP-198SK6H"}, {"name": "thread", "value": "13256-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test_attach_fixture_finalizer"}]}